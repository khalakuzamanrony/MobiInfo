name: Daily Mobile Scraper

on:
  schedule:
    # Runs daily at 10 PM Bangladesh Time (BDT is UTC+6)
    # - cron: '0 16 * * *'  # 16:00 UTC = 22:00 BDT
    # This will run at 21:00 (9:00 PM) UTC on Thursday.
    # In Bangladesh (UTC+6), this is 3:00 AM on Friday.
    - cron: '0 6 * * *'
  workflow_dispatch: # Allows manual triggering

jobs:
  run-scraper:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run scraper
        run: python mobiinfo.py

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add MobiInfo/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Daily scraper update - $(date '+%Y-%m-%d %H:%M:%S')"
            # Pull latest changes first to avoid conflicts
            git pull --rebase origin main || git pull origin main
            git push
          fi

      - name: Send Telegram notification
        run: |
          # Check if changelog exists
          if [ -f "MobiInfo/changelog.md" ]; then
            # Extract only the first/latest changelog entry (stop at first ---)
            latest_changelog=$(sed -n '/^## /,/^---$/{ /^---$/q; p; }' MobiInfo/changelog.md)
            
            # If no entry found, use a default message
            if [ -z "$latest_changelog" ]; then
              latest_changelog="No changelog entry found for today."
              formatted_message="üì± MobiInfo DB Update%0A%0ANo changelog entry found for today."
            else
              # Extract date from changelog
              changelog_date=$(echo "$latest_changelog" | head -n1 | sed 's/^## //')
              
              # Extract summary section and clean it
              summary_section=$(echo "$latest_changelog" | sed -n '/### Summary/,/### Detailed Changes/{/### Detailed Changes/!p;}' | grep -E '^- \*\*' | sed 's/\*\*\([^*]*\)\*\*/\1/g' | sed 's/^- /- /')
              
              # Extract detailed changes (first few brands only to avoid message length limits)
              detailed_section=$(echo "$latest_changelog" | sed -n '/### Detailed Changes/,$p' | head -n 30)
              
              # Build message step by step with proper escaping
              formatted_message="üì± MobiInfo DB Update\n\n${changelog_date}\n\n${summary_section}\n\nDetails Summary:\n"
              
              # Process detailed changes with clean formatting
              if [ ! -z "$detailed_section" ]; then
                # Clean the detailed section and process it
                details_processed=$(echo "$detailed_section" | \
                  sed 's/### Detailed Changes//g' | \
                  sed 's/#### /# /g' | \
                  sed 's/\*\*Updated phone\*\*: /- /g' | \
                  sed 's/\*\*Added new phone\*\*: /- /g' | \
                  sed 's/\*\*\([^*]*\)\*\*/\1/g' | \
                  sed '/^[[:space:]]*$/d')
                
                # Extract sections and format them
                new_phones=$(echo "$details_processed" | \
                  sed -n '/^## New phones added/,/^## /p' | \
                  sed '/^## New phones added/d' | \
                  sed '/^## /d' | \
                  sed 's/^# //g' | \
                  awk '/^[a-zA-Z]/ { brand=$0; next } /^- / { print "- " substr($0,3) }')
                
                updates=$(echo "$details_processed" | \
                  sed -n '/^## Updates/,/^## /p' | \
                  sed '/^## Updates/d' | \
                  sed '/^## /d' | \
                  sed 's/^# //g' | \
                  awk '/^[a-zA-Z]/ { brand=$0; next } /^- / { print $0 }')
                
                visited=$(echo "$details_processed" | \
                  sed -n '/^## Visited/,/^## /p' | \
                  sed '/^## Visited/d' | \
                  sed '/^## /d' | \
                  sed 's/^# //g' | \
                  awk '/^[a-zA-Z]/ { print "# " $0 }')
                
                # Build the final details section
                details_final=""
                if [ ! -z "$new_phones" ]; then
                  details_final="${details_final}\n## New phones added\n${new_phones}\n"
                fi
                if [ ! -z "$updates" ]; then
                  details_final="${details_final}\n## Updates\n${updates}\n"
                fi
                if [ ! -z "$visited" ]; then
                  details_final="${details_final}\n## Visited\n${visited}\n"
                fi
                
                formatted_message="${formatted_message}${details_final}-----------------------"
              fi
            fi
            
            # Send to Telegram with proper formatting
            curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
              -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
              -d parse_mode=HTML \
              -d text="$(echo -e "$formatted_message")"
          else
            # Send error message if changelog doesn't exist
            curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
              -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
              -d text="‚ùå Error: Changelog file not found. The scraper may have failed."
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scraper-data
          path: MobiInfo/
          retention-days: 30
